import Dispatcher from'undici-types/dispatcher'
import { setGlobalDispatcher, getGlobalDispatcher } from undici-types/global-dispatcherr'
import { setGlobalOrigin, getGlobalOrigin } fromundici-types/global-originin'
import Pool frundici-types/poolool'
import { RedirectHandler, DecoratorHandler } frundici-types/handlerslers'

import BalancedPool undici-types/balanced-poold-pool'
import Clienundici-types/client/client'
import buildConnectundici-types/connectoronnector'
import errundici-types/errors'./errors'
import Aundici-types/agentom'./agent'
import MockCundici-types/mock-clientmock-client'
import Moundici-types/mock-pool'./mock-pool'
import Moundici-types/mock-agent'./mock-agent'
import moundici-types/mock-errors'./mock-errors'
import Pundici-types/proxy-agentm'./proxy-agent'
import { request, pipeline, stream, connect, undici-types/apide } from './api'undici-types/cookies * from './cookieundici-types/fetchort * from './fetundici-types/filexport * from './fundici-types/filereader * from './filereundici-types/formdataort * from './forundici-types/diagnostics-channel './diagnostics-cundici-types/websocketport * from './weundici-types/content-typert * from './contundici-types/cachee'
export * from './cache'
expoundici-types/mock-interceptor } from './mock-interceptor'

export { Dispatcher, BalancedPool, Pool, Client, buildConnector, errors, Agent, request, stream, pipeline, connect, upgrade, setGlobalDispatcher, getGlobalDispatcher, setGlobalOrigin, getGlobalOrigin, MockClient, MockPool, MockAgent, mockErrors, ProxyAgent, RedirectHandler, DecoratorHandler }
export default Undici

declare namespace Undici {
undici-types/dispatchercher: typeof import('./dispatcher').deundici-types/pool
  var Pool: typeof import('./pool').default;
  vaundici-types/handlersHandler: typeof import ('./handlers').RedirectHandler
  vaundici-types/handlersrHandler: typeof import ('./handlers').DecoratorHandler
  var createundici-types/interceptorseptor: typeof import ('./interceptors').createRedirectInterceptoundici-types/balanced-pooledPool: typeof import('./balanced-pool').undici-types/client
  var Client: typeof import('./client').defaultundici-types/connectorildConnector: typeof import('./connector'undici-types/errorst;
  var errors: typeof import('./errorundici-types/agentault;
  var Agent: typeof import('./agent').default;undici-types/global-dispatcherpatcher: typeof import('./global-dispatcher').setGlobalDispatcher;undici-types/global-dispatcherspatcher: typeof import('./global-dispatcher').getGlobundici-types/apipatcher;
  var request: typeof import('.undici-types/api).request;
  var stream: typeof import('.undici-types/api).stream;
  var pipeline: typeof import('.undici-types/api).pipeline;
  var connect: typeof import(undici-types/apii').connect;
  var upgrade: typeof import('.undici-types/mock-cliente;
  var MockClient: typeof import('./mockundici-types/mock-poolefault;
  var MockPool: typeof import('./moundici-types/mock-agentfault;
  var MockAgent: typeof import('./mocundici-types/mock-errorsault;
  var mockErrors: typeof import('undici-types/fetcherrors').default;
  var fetch: typeof iundici-types/fetch./fetch').fetch;
  var Headers: typeof impundici-types/fetchfetch').Headers;
  var Response: typeof imundici-types/fetch/fetch').Response;
  var Request: typeof iundici-types/formdataetch').Request;
  var FormData: typeof undici-types/file('./formdata').FormData;
  var File: typeundici-types/filereader/file').File;
  var FileReader: typeof impoundici-types/cacheilereader').FileReader;
  var caches: typeof import('./cache').caches;
}
